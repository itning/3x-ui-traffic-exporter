name: Build Multi-Platform Binaries and Upload to Release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, windows, darwin]
        arch: [amd64, arm64]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.1'

      - name: Build Binary
        run: |
          export GOOS=${{ matrix.os }}
          export GOARCH=${{ matrix.arch }}
          # Determine the output file name with .exe extension for Windows
          if [ "${{ matrix.os }}" = "windows" ]; then
            export OUTPUT_FILE="3x-ui-traffic-exporter-${GOOS}-${GOARCH}.exe"
          else
            export OUTPUT_FILE="3x-ui-traffic-exporter-${GOOS}-${GOARCH}"
          fi
          echo "Building for ${GOOS}/${GOARCH}..."
          go build -o $OUTPUT_FILE main.go

      - name: Upload Binary as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.arch }}
          path: ${{ matrix.os == 'windows' && format('3x-ui-traffic-exporter-{0}-{1}.exe', matrix.os, matrix.arch) || format('3x-ui-traffic-exporter-{0}-{1}', matrix.os, matrix.arch) }}

  release:
   needs: build
   runs-on: ubuntu-latest
   steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Debug Artifacts
      run: ls -R artifacts

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false

    - name: Upload Release Assets
      run: |
        # 遍历 artifacts 目录中的所有文件并上传
        for dir in artifacts/*; do
          if [ -d "$dir" ]; then
            for file in "$dir"/*; do
              if [ -f "$file" ]; then
                echo "Uploading $file..."
                asset_name=$(basename "$file")
                curl -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Content-Type: application/octet-stream" \
                  --data-binary @"$file" \
                  "${{ steps.create_release.outputs.upload_url }}?name=$asset_name"
              fi
            done
          fi
        done
